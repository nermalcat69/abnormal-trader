'use strict';

const kit = require('@nuxt/kit');

const envModules = {
  colorMode: process?.env?.THEME_DEV_COLOR_MODE_PATH || "@nuxtjs/color-mode",
  pinceau: process?.env?.THEME_DEV_PINCEAU_PATH || "pinceau/nuxt"
};
const module$1 = kit.defineNuxtModule({
  meta: {
    name: "@nuxt-themes/tokens",
    configKey: "tokens"
  },
  async setup(_, nuxt) {
    const modulePath = kit.createResolver((typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (document.currentScript && document.currentScript.src || new URL('module.cjs', document.baseURI).href)));
    nuxt.hook(
      "pinceau:options",
      (options) => {
        if (!options) {
          return;
        }
        options.configLayers = options?.configLayers || [];
        options.configLayers.push({
          cwd: modulePath.resolve(),
          configFileName: "tokens.config"
        });
      }
    );
    nuxt.hook("prepare:types", (opts) => {
      const tsConfig = opts.tsConfig;
      tsConfig.compilerOptions = tsConfig.compilerOptions || {};
      tsConfig.compilerOptions.paths = tsConfig.compilerOptions.paths || {};
      tsConfig.compilerOptions.paths["@nuxt-themes/tokens/config"] = [modulePath.resolve("./tokens.config.ts")];
    });
    await kit.installModule(envModules.colorMode, { classSuffix: "" });
    await kit.installModule(envModules.pinceau, { colorSchemeMode: "class" });
  }
});

module.exports = module$1;
