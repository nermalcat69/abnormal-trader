'use strict';

const node_fs = require('node:fs');
const defu = require('defu');
const kit = require('@nuxt/kit');

const log = kit.logger.withTag("@nuxt/studio");
const module$1 = kit.defineNuxtModule({
  meta: {
    name: "studio",
    configKey: "studio"
  },
  defaults: {
    enabled: "production"
  },
  async setup(options, nuxt) {
    nuxt.hook("schema:resolved", (schema) => {
      nuxt.options.runtimeConfig.appConfigSchema = {
        properties: schema.properties?.appConfig,
        default: schema.default?.appConfig
      };
    });
    nuxt.hook("app:resolve", (appCtx) => {
      const studioAppConfigPath = kit.resolveAlias("~/.studio/app.config.json");
      if (node_fs.existsSync(studioAppConfigPath)) {
        appCtx.configs.unshift(studioAppConfigPath);
      }
    });
    if (options.enabled === "production" && nuxt.options.dev === true) {
      return;
    }
    const contentModule = "@nuxt/content";
    if (!nuxt.options.runtimeConfig.content && !nuxt.options.modules.includes(contentModule)) {
      log.warn("Could not find `@nuxt/content` module. Please install it to enable preview mode.");
      return;
    }
    const contentModuleVersion = await import(contentModule).then((m) => m.default || m).then((m) => m.getMeta()).then((m) => m.version).catch(() => "0");
    if (contentModuleVersion < "2.1.1") {
      log.warn("Please update `@nuxt/content` to version 2.1.1 or higher to enable preview mode.");
      return;
    }
    nuxt.hook("pinceau:options", (options2) => {
      options2.studio = true;
    });
    const { resolve } = kit.createResolver((typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (document.currentScript && document.currentScript.src || new URL('module.cjs', document.baseURI).href)));
    const apiURL = process.env.NUXT_PUBLIC_STUDIO_API_URL || process.env.STUDIO_API || "https://api.nuxt.studio";
    nuxt.options.runtimeConfig.studio = nuxt.options.runtimeConfig.studio || {};
    nuxt.options.runtimeConfig.public.studio = defu.defu(nuxt.options.runtimeConfig.public.studio, { apiURL });
    kit.extendViteConfig((config) => {
      config.optimizeDeps = config.optimizeDeps || {};
      config.optimizeDeps.include = config.optimizeDeps.include || [];
      config.optimizeDeps.include.push(
        "socket.io-client",
        "slugify"
      );
    });
    kit.addPlugin(resolve("./runtime/plugins/preview.client"));
    kit.addComponentsDir({ path: resolve("./runtime/components") });
    kit.addServerHandler({
      method: "get",
      route: "/__studio.json",
      handler: resolve("./runtime/server/routes/studio")
    });
    kit.addPrerenderRoutes("/__studio.json");
    await kit.installModule("nuxt-config-schema");
    await kit.installModule("nuxt-component-meta", {
      globalsOnly: true
    });
  }
});

module.exports = module$1;
