import { ComputedRef } from 'vue';
import { u as usePinceauThemeSheet } from './theme-ee4fd586.js';
import { T as TokensFunctionOptions, C as ColorSchemeModes, D as DesignTokens, a as TokenKey, b as DtFunction, P as PinceauOptions } from './index-a242c3c1.js';
export { _ as AdvancedPseudos, K as BooleanVariant, u as CSSFunctionType, t as CSSProperties, Q as ClassVariant, s as ComputedStyleDefinition, r as ComputedStyleProp, w as ConfigFileImport, v as ConfigLayer, n as ConfigOrPaths, J as DefaultThemeMap, B as DefineConfigType, I as DesignToken, O as EnumVariant, F as FilterStartingWith, L as LoadConfigResult, M as MappedProperty, a2 as NativeProperties, N as NestedKeyOf, p as PinceauConfigContext, o as PinceauContext, y as PinceauMediaProperties, l as PinceauMediaQueries, h as PinceauQuery, i as PinceauTheme, j as PinceauTokensPaths, k as PinceauUtils, x as PinceauUtilsProperties, m as PinceauVirtualContext, e as PrefixObjectKeys, c as Primitive, a6 as PropertyValue, a0 as Pseudos, a1 as PseudosProperties, G as RawTokenType, z as ReservedConfigKeys, R as ResolvedConfigLayer, H as ResponsiveToken, $ as SimplePseudos, S as SuffixObjectKeys, a5 as SupportedProperties, A as Theme, q as ThemeGenerationOutput, a3 as ThemeProperties, a4 as ThemeTokens, E as TokensFunction, U as UnwrapKey, a7 as UsableTokens, X as Variant, V as VariantOptions, Y as Variants, Z as VuePseudos, W as WrapKey, f as WrapObjectKeys, g as WrapUnion, d as WrappedValue } from './index-a242c3c1.js';
export { d as defineTheme } from './define-b8c306eb.js';
import 'vite';
import '#pinceau/theme';
import '#pinceau/utils';
import 'untyped';
import 'csstype';

const version = "0.18.9";

interface PinceauRuntimeIds {
    uid: string;
    componentId: string;
    uniqueClassName?: string;
}
interface PinceauRuntimePluginOptions {
    /**
     * Initial theme.
     *
     * It does not need to be passed as it will be resolved at runtime from the associated stylesheet.
     */
    theme?: any;
    /**
     * Utils functions coming from `#pinceau/utils` import.
     */
    utils?: any;
    /**
     * Toggles the multi-app mode.
     */
    multiApp: false;
    /**
     * Toggles development mode for runtime plugin.
     */
    dev: boolean;
    /**
     * Tokens resolver options.
     */
    tokensHelperConfig: TokensFunctionOptions;
    /**
     * Color scheme mode to be used by runtime plugin.
     */
    colorSchemeMode: ColorSchemeModes;
}
type PinceauUidTypes = 'v' | 'c' | 'p';

interface ScaleTokens extends DesignTokens {
    [key: string]: TokenKey | {
        default?: TokenKey;
        50?: TokenKey;
        100?: TokenKey;
        200?: TokenKey;
        300?: TokenKey;
        400?: TokenKey;
        500?: TokenKey;
        600?: TokenKey;
        700?: TokenKey;
        800?: TokenKey;
        900?: TokenKey;
    };
}
interface BreakpointsTokens extends DesignTokens {
    '2xs'?: TokenKey;
    xs?: TokenKey;
    sm?: TokenKey;
    md?: TokenKey;
    lg?: TokenKey;
    xl?: TokenKey;
    '2xl'?: TokenKey;
    '3xl'?: TokenKey;
    '4xl'?: TokenKey;
    '5xl'?: TokenKey;
    '6xl'?: TokenKey;
    '7xl'?: TokenKey;
}
interface FontWeightTokens extends DesignTokens {
    thin?: TokenKey;
    extraLight?: TokenKey;
    light?: TokenKey;
    regular?: TokenKey;
    medium?: TokenKey;
    semiBold?: TokenKey;
    bold?: TokenKey;
    extraBold?: TokenKey;
    black?: TokenKey;
    heavyBlack?: TokenKey;
}
interface ConfigSuggestion {
    color?: ScaleTokens | DesignTokens;
    font?: DesignTokens;
    fontWeight?: FontWeightTokens | DesignTokens;
    fontSize?: BreakpointsTokens | DesignTokens;
    size?: BreakpointsTokens | DesignTokens;
    space?: BreakpointsTokens | DesignTokens;
    radii?: BreakpointsTokens | DesignTokens;
    border?: BreakpointsTokens | DesignTokens;
    borderWidth?: BreakpointsTokens | DesignTokens;
    borderStyle?: BreakpointsTokens | DesignTokens;
    shadow?: BreakpointsTokens | DesignTokens;
    opacity?: BreakpointsTokens | DesignTokens;
    lead?: BreakpointsTokens | DesignTokens;
    letterSpacing?: BreakpointsTokens | DesignTokens;
    transition?: DesignTokens;
    zIndex?: DesignTokens;
}

/**
 * Exposes @nuxt/kit types from index so Nuxt recognizes typings properly for Pinceau inside the `nuxt.config.ts` file.
 */
interface ModuleHooks {
    'pinceau:options': (options: PinceauOptions) => void | Promise<void>;
}
interface ModuleOptions extends PinceauOptions {
}

declare module '@vue/runtime-core' {
    interface ComponentCustomProperties {
        $dt: DtFunction;
        $pinceau: ComputedRef<string>;
        $pinceauTheme: ReturnType<typeof usePinceauThemeSheet>;
        $pinceauRuntime: any;
    }
}
declare module '@nuxt/schema' {
    interface NuxtHooks extends ModuleHooks {
    }
    interface NuxtConfig {
        pinceau?: ModuleOptions;
    }
}
/**
 * Globals
 *
 * TODO: Move out to Volar plugin
 */
declare global {
    const $dt: DtFunction;
    const $pinceau: string;
    const __$pProps: any;
}

export { BreakpointsTokens, ColorSchemeModes, ConfigSuggestion, DesignTokens, DtFunction, FontWeightTokens, ModuleHooks, ModuleOptions, PinceauOptions, PinceauRuntimeIds, PinceauRuntimePluginOptions, PinceauUidTypes, ScaleTokens, TokenKey, TokensFunctionOptions, version };
