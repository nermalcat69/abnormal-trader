import { createUnplugin } from 'unplugin';
import MagicString from 'magic-string';
import { join } from 'pathe';
import consola from 'consola';
import chalk from 'chalk';
import { o as outputFileNames } from './pinceau.3988746b.mjs';
import 'fs';
import 'fs/promises';
import 'jiti';
import 'defu';
import 'acorn';
import { m as merger, u as useDebugPerformance, a as updateDebugContext, p as parsePinceauQuery, J as JS_EXTENSIONS, b as message } from './pinceau.23c34d4f.mjs';
import 'vue/compiler-sfc';
import 'recast';
import 'recast/parsers/typescript.js';
import 'ohash';
import 'scule';
import { u as usePinceauContext, r as registerAliases, a as registerPostCssPlugins, b as replaceStyleTs, t as transformDtHelper, c as resolveStyleQuery, d as transformVueSFC, l as loadVueStyle } from './pinceau.aa6b702d.mjs';
import 'vue';
import 'style-dictionary-esm';
import 'untyped';

const defaultOptions = {
  configFileName: "tokens.config",
  configLayers: [],
  configResolved: (_) => {
  },
  configBuilt: (_) => {
  },
  cwd: process.cwd(),
  outputDir: join(process.cwd(), "node_modules/.vite/pinceau/"),
  preflight: true,
  includes: [],
  excludes: [
    "node_modules/nuxt/dist/",
    "node_modules/@nuxt/ui-templates/",
    "node_modules/@vue/",
    "node_modules/pinceau/",
    ...outputFileNames
  ],
  followSymbolicLinks: true,
  colorSchemeMode: "media",
  debug: false,
  componentMetaSupport: false,
  runtime: true,
  definitions: true,
  studio: false,
  dev: process.env.NODE_ENV !== "production",
  utilsImports: []
};
const pinceau = createUnplugin((options) => {
  options = merger(options, defaultOptions);
  const { stopPerfTimer } = useDebugPerformance("Setup Unplugin", options?.debug);
  updateDebugContext({
    debugLevel: options?.dev ? options.debug : false,
    logger: consola.withScope(" \u{1F58C} "),
    // chalk.bgBlue.blue
    tag: (value) => chalk.bgBlue.blue(value),
    // chalk.blue
    info: (value) => chalk.blue(value),
    // chalk.yellow
    warning: (value) => chalk.yellow(value),
    // chalk.red
    error: (value) => chalk.red(value)
  });
  const ctx = usePinceauContext(options);
  stopPerfTimer();
  return {
    name: "pinceau-transforms",
    enforce: "pre",
    vite: {
      config(config) {
        registerAliases(config, options);
        registerPostCssPlugins(config, options);
      },
      async configResolved(config) {
        await ctx.updateCwd(config.root);
      },
      async configureServer(server) {
        ctx.env = "dev";
        await ctx.ready;
        ctx.setViteServer(server);
      },
      handleHotUpdate(ctx2) {
        const defaultRead = ctx2.read;
        ctx2.read = async function() {
          const code = await defaultRead();
          return replaceStyleTs(code, ctx2.file) || code;
        };
      },
      transformIndexHtml: {
        order: "post",
        handler(html) {
          html = html.replace(
            "<pinceau />",
            `<style id="pinceau-theme">${ctx.getOutput(
              "/__pinceau_css.css"
            )}</style>`
          );
          html = html.replace(
            '<style id="pinceau-theme"></style>',
            `<style id="pinceau-theme">${ctx.getOutput(
              "/__pinceau_css.css"
            )}</style>`
          );
          return html;
        }
      }
    },
    transformInclude(id) {
      let toRet;
      const query = parsePinceauQuery(id);
      if (options.excludes && options.excludes.some((path) => id.includes(path))) {
        toRet = false;
      }
      if (toRet !== false && options.includes && options.includes.some((path) => id.includes(path))) {
        toRet = true;
      }
      if (toRet !== false && query?.transformable) {
        toRet = true;
      }
      if (toRet) {
        ctx.addTransformed(id);
      }
      return toRet;
    },
    transform(code, id) {
      if (!code) {
        return;
      }
      const { stopPerfTimer: stopPerfTimer2 } = useDebugPerformance(
        `Transforming ${id}`,
        options.debug
      );
      code = replaceStyleTs(code, id);
      const query = parsePinceauQuery(id);
      const loc = { query, source: code };
      const magicString = new MagicString(code, { filename: query.filename });
      const result = () => {
        stopPerfTimer2();
        const sourceMap = magicString.generateMap();
        sourceMap.file = query.filename;
        sourceMap.sources = [query.filename];
        return { code: magicString.toString(), map: sourceMap };
      };
      try {
        if (JS_EXTENSIONS.includes(query.ext)) {
          return { code: transformDtHelper(code, ctx) };
        }
        if (query.styles && !query.vue || query.type === "style") {
          return { code: resolveStyleQuery(code, magicString, query, ctx, loc).code };
        }
        code = transformVueSFC(code, query, magicString, ctx).code;
      } catch (e) {
        message("TRANSFORM_ERROR", [id, e]);
        return { code };
      }
      return result();
    },
    resolveId(id) {
      return ctx.getOutputId(id);
    },
    load(id) {
      const { stopPerfTimer: stopPerfTimer2 } = useDebugPerformance(
        `Load ${id}`,
        options.debug
      );
      const output = ctx.getOutput(id);
      if (output) {
        stopPerfTimer2();
        return output;
      }
      const query = parsePinceauQuery(id);
      if (query.vue && query.type === "style") {
        const vueStyle = loadVueStyle(query, ctx);
        if (vueStyle) {
          const sourceMap = new MagicString(vueStyle, {
            filename: query.filename
          }).generateMap({ file: query.filename, includeContent: true });
          sourceMap.sources = [query.filename];
          sourceMap.file = query.filename;
          stopPerfTimer2();
          return {
            code: vueStyle,
            map: sourceMap
          };
        }
      }
      stopPerfTimer2();
    }
  };
});

export { defaultOptions as d, pinceau as p };
