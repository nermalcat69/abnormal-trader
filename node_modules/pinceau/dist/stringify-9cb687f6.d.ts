import { T as TokensFunctionOptions, E as TokensFunction, o as PinceauContext, l as PinceauMediaQueries, C as ColorSchemeModes } from './index-a242c3c1.js';

/**
 * Get a theme token by its path
 */
declare function createTokensHelper(theme?: any, options?: TokensFunctionOptions): TokensFunction;
/**
  * Take a CSS property and transform every tokens present in it to their value.
  */
declare function transformTokensToVariable(property: string): string;
/**
 * Resolve a `var(--token)` value from a token path.
 */
declare function resolveVariableFromPath(path: string): string;
/**
 * Resolve a variable from a path.
 */
declare function pathToVarName(path: string | string[]): string;

/**
 * Resolve a css function property to a stringifiable declaration.
 */
declare function resolveCssProperty(property: any, value: any, style: any, selectors: any, localTokens: string[], ctx: PinceauContext, loc?: any): any;
/**
 * Cast value or values before pushing it to the style declaration
 */
declare function castValues(property: any, value: any, localTokens: string[], ctx: PinceauContext, loc?: any): any;
/**
 * Cast a value to a valid CSS unit.
 */
declare function castValue(property: any, value: any, localTokens: string[], ctx: PinceauContext, loc?: any): any;
/**
 * Resolve token references
 */
declare function resolveReferences(_: string, value: string, localTokens: string[], ctx: PinceauContext, loc?: any): string;
/**
 * Resolve custom directives (@mq, @dark).
 */
declare function resolveCustomDirectives(property: any, value: any, selectors: any, ctx: PinceauContext, loc?: any): {
    '@media': {
        [x: string]: any;
    };
} | {
    [x: string]: any;
    '@media'?: undefined;
};
/**
 * Return a theme rule from a media query key, some content and a theme.
 */
declare function resolveThemeRule(mq: PinceauMediaQueries, content?: string, theme?: any, colorSchemeMode?: ColorSchemeModes): string;

/** Returns selectors resolved from parent selectors and nested selectors. */
declare const getResolvedSelectors: (parentSelectors: any, nestedSelectors: any) => any;
/** Returns a string of CSS from an object of CSS. */
declare const stringify: (value: any, replacer?: any) => string;

export { resolveCssProperty as a, castValues as b, createTokensHelper as c, castValue as d, resolveReferences as e, resolveCustomDirectives as f, resolveThemeRule as g, getResolvedSelectors as h, pathToVarName as p, resolveVariableFromPath as r, stringify as s, transformTokensToVariable as t };
