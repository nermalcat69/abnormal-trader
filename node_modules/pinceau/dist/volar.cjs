'use strict';

const languageCore = require('@volar/language-core');
const defu = require('defu');
const query = require('./shared/pinceau.71cfe6a3.cjs');
require('ohash');
require('scule');
require('fs');
require('fs/promises');
require('jiti');
require('pathe');
require('perf_hooks');
require('vue');
require('style-dictionary-esm');
require('untyped');
require('postcss-nested');
require('postcss-custom-properties');
require('postcss-dark-theme-class');
require('acorn');
require('./shared/pinceau.1adee1a2.cjs');
require('vue/compiler-sfc');
require('recast');
require('recast/parsers/typescript.js');

const plugin = (_) => ({
  version: 1,
  getEmbeddedFileNames(fileName, sfc) {
    const fileNames = [];
    for (let i = 0; i < sfc.styles.length; i++) {
      const style = sfc.styles[i];
      if (style.lang === "ts" && style?.content) {
        fileNames.push(`${fileName}.cssInTs.${i}.ts`);
      }
    }
    return fileNames;
  },
  resolveEmbeddedFile(fileName, sfc, embeddedFile) {
    const isCssInTsFile = embeddedFile.fileName.includes(".cssInTs.");
    let variantsContent;
    if (isCssInTsFile || embeddedFile.fileName.replace(fileName, "").match(/^\.(js|ts|jsx|tsx)$/)) {
      const variants = resolveVariantsContent(sfc);
      if (sfc.scriptSetup) {
        const isTs = sfc.scriptSetup.lang === "ts";
        const variantProps = query.resolveVariantsProps(variants, isTs);
        if (variantProps && Object.keys(variantProps).length) {
          variantsContent = query.expressionToAst(JSON.stringify(variantProps));
          variantsContent = query.castVariantsPropsAst(variantsContent);
          variantsContent = `
const variants = ${query.printAst(variantsContent).code}
`;
        }
      }
    }
    if (isCssInTsFile) {
      embeddedFile.content.unshift("\nimport type { PinceauMediaQueries, CSSFunctionType } from 'pinceau'");
      if (variantsContent) {
        embeddedFile.content.push(variantsContent);
      }
      if (sfc.scriptSetup) {
        embeddedFile.content.push(sfc.scriptSetup.content);
      }
      const context = [
        "\ntype OmittedKeysPinceau = 'onVnodeBeforeMount' | 'onVnodeBeforeUnmount' | 'onVnodeBeforeUpdate' | 'onVnodeMounted' | 'onVnodeUnmounted' | 'onVnodeUpdated' | 'key' | 'ref' | 'ref_for' | 'ref_key' | 'style' | 'class'\n",
        `
type PinceauProps = Omit<InstanceType<typeof import('${fileName}').default>['$props'], OmittedKeysPinceau>
`,
        "\nfunction css (declaration: CSSFunctionType<PinceauProps>) { return { declaration } }\n"
      ];
      embeddedFile.content.push(...context);
      const index = Number(embeddedFile.fileName.split(".").slice(-2)[0]);
      const style = sfc.styles[index];
      if (!style?.content) {
        return;
      }
      embeddedFile.capabilities = languageCore.FileCapabilities.full;
      embeddedFile.kind = 1;
      embeddedFile.content.push([
        style?.content,
        style?.name,
        0,
        languageCore.FileRangeCapabilities.full
      ]);
    } else if (variantsContent) {
      embeddedFile.content.push(variantsContent);
    }
  }
});
function resolveVariantsContent(sfc) {
  let variants = {};
  for (let i = 0; i < sfc.styles.length; i++) {
    const style = sfc.styles[i];
    try {
      if (style.lang === "ts") {
        query.resolveCssCallees(
          style.content,
          (styleAst) => {
            const cssContent = query.evalCssDeclaration(styleAst);
            if (cssContent?.variants) {
              variants = defu.defu(variants, cssContent?.variants);
            }
          }
        );
      }
    } catch (e) {
    }
  }
  return variants;
}

module.exports = plugin;
