import { FileCapabilities, FileRangeCapabilities } from '@volar/language-core';
import { defu } from 'defu';
import { h as resolveVariantsProps, l as expressionToAst, d as castVariantsPropsAst, o as printAst, r as resolveCssCallees, e as evalCssDeclaration } from './shared/pinceau.23c34d4f.mjs';
import 'ohash';
import 'scule';
import 'fs';
import 'fs/promises';
import 'jiti';
import 'pathe';
import 'perf_hooks';
import 'vue';
import 'style-dictionary-esm';
import 'untyped';
import 'postcss-nested';
import 'postcss-custom-properties';
import 'postcss-dark-theme-class';
import 'acorn';
import './shared/pinceau.3988746b.mjs';
import 'vue/compiler-sfc';
import 'recast';
import 'recast/parsers/typescript.js';

const plugin = (_) => ({
  version: 1,
  getEmbeddedFileNames(fileName, sfc) {
    const fileNames = [];
    for (let i = 0; i < sfc.styles.length; i++) {
      const style = sfc.styles[i];
      if (style.lang === "ts" && style?.content) {
        fileNames.push(`${fileName}.cssInTs.${i}.ts`);
      }
    }
    return fileNames;
  },
  resolveEmbeddedFile(fileName, sfc, embeddedFile) {
    const isCssInTsFile = embeddedFile.fileName.includes(".cssInTs.");
    let variantsContent;
    if (isCssInTsFile || embeddedFile.fileName.replace(fileName, "").match(/^\.(js|ts|jsx|tsx)$/)) {
      const variants = resolveVariantsContent(sfc);
      if (sfc.scriptSetup) {
        const isTs = sfc.scriptSetup.lang === "ts";
        const variantProps = resolveVariantsProps(variants, isTs);
        if (variantProps && Object.keys(variantProps).length) {
          variantsContent = expressionToAst(JSON.stringify(variantProps));
          variantsContent = castVariantsPropsAst(variantsContent);
          variantsContent = `
const variants = ${printAst(variantsContent).code}
`;
        }
      }
    }
    if (isCssInTsFile) {
      embeddedFile.content.unshift("\nimport type { PinceauMediaQueries, CSSFunctionType } from 'pinceau'");
      if (variantsContent) {
        embeddedFile.content.push(variantsContent);
      }
      if (sfc.scriptSetup) {
        embeddedFile.content.push(sfc.scriptSetup.content);
      }
      const context = [
        "\ntype OmittedKeysPinceau = 'onVnodeBeforeMount' | 'onVnodeBeforeUnmount' | 'onVnodeBeforeUpdate' | 'onVnodeMounted' | 'onVnodeUnmounted' | 'onVnodeUpdated' | 'key' | 'ref' | 'ref_for' | 'ref_key' | 'style' | 'class'\n",
        `
type PinceauProps = Omit<InstanceType<typeof import('${fileName}').default>['$props'], OmittedKeysPinceau>
`,
        "\nfunction css (declaration: CSSFunctionType<PinceauProps>) { return { declaration } }\n"
      ];
      embeddedFile.content.push(...context);
      const index = Number(embeddedFile.fileName.split(".").slice(-2)[0]);
      const style = sfc.styles[index];
      if (!style?.content) {
        return;
      }
      embeddedFile.capabilities = FileCapabilities.full;
      embeddedFile.kind = 1;
      embeddedFile.content.push([
        style?.content,
        style?.name,
        0,
        FileRangeCapabilities.full
      ]);
    } else if (variantsContent) {
      embeddedFile.content.push(variantsContent);
    }
  }
});
function resolveVariantsContent(sfc) {
  let variants = {};
  for (let i = 0; i < sfc.styles.length; i++) {
    const style = sfc.styles[i];
    try {
      if (style.lang === "ts") {
        resolveCssCallees(
          style.content,
          (styleAst) => {
            const cssContent = evalCssDeclaration(styleAst);
            if (cssContent?.variants) {
              variants = defu(variants, cssContent?.variants);
            }
          }
        );
      }
    } catch (e) {
    }
  }
  return variants;
}

export { plugin as default };
